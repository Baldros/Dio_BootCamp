# -*- coding: utf-8 -*-
"""API_ProjectDio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/184jRjCbBQ5pUugnQ6TP74Om4icXLXzMc

# Apresentação:

**Motivação do Exercício:**
```
A ideia geral do exercício consiste em explorar o trabalho
com IAs generativas em um Pipeline de ETL, utilizando Python
como linguagem e o ChatGPT como IA generativa.
```

**Objetivo:**
```
O objetivo desse código é, utilizando uma API de uma IA
generativa para criar uma aplicação de mensagem de marketing
personalizado para os clientes.
```

**Passos do Problema:**
```
1.   A informação será recebida numa planilha simples, em
formato CSV ('SDW2023.csv'), com uma lista de IDs de usuário
do banco.

2.   Seu trabalho é consumir o endpoint GET
https://sdw-2023-prd.up.railway.app/users/{id}
(API da Santander Dev Week 2023) para obter os
dados de cada cliente.

3.  Dado a obtenção dos dados, a ideia é usar a API
do ChatGPT (OpenAI) para gerar uma mensagens de marketing
personalizada para cada cliente. Essa mensagens devem
enfatizar a importância dos investimentos.

4.  Uma vez que a mensagem para cada cliente esteja pronta,
a ideia é enviar essas informações de volta para a API,
atualizando a lista de "news" de cada usuário usando o
endpoint PUT https://sdw-2023-prd.up.railway.app/users/{id}.
```

**Links Importantes:**
1. REPOSITÓRIO DA API: https://github.com/digitalinnovationone/santander-dev-week-2023-api
2. SWAGGER: https://sdw-2023-prd.up.railway.app/swagger-ui/index.html#/

# Importações e Instalações necessárias:



```
Aqui são algumas importações e intalações necessárias
ao funcionamento da aplicação. Note, para o ambiente do
colab, algumas bibliotecas já veem instaladas, outras
precisam ser instaladas.
```
"""

# Intalações:
!pip install openai

# Importações:
import pandas as pd
import requests
import json
import openai

"""# Extração (Extract):



```
A etapa de "Extract" (Extrair) é a primeira fase de um processo ETL
(Extract, Transform, Load) em engenharia de dados e ciência de dados. Nesta
fase, o principal objetivo é coletar dados brutos, podendo vir várias
fontes, e transformá-los em um formato adequado para análise posterior.
```

## Comunicação com a API com os dados:

Comunicação com a API da Santander Dev Week 2023

```
A API da Santander Dev Week 2023 simula a
comunicação com um SGBD (Sistema de Gerenciamento
de Banco de Dados) que tenha o conjunto de dados
que queiramos acessar.

Definir essa comunicação é fundamental para o primeiro
passo do ETL (e também seria para o ELT), pois é desse
banco de dados que extrairemos as informações dos usuários
que gostariamos enviar mensagens.
```
"""

# Guardando a URL da API numa variável para ser utilizada:
sdw2023_api_url = 'https://sdw-2023-prd.up.railway.app'

# Resposta:
print(sdw2023_api_url)

# Definindo o DataFrame:
#df = pd.read_csv('SDW2023.csv', index_col='UserID')
df = pd.read_csv('SDW2023.csv')
df

# Definindo a lista de usuários:
user_list= df['UserID'].tolist()

#Printando os usuários:
print(user_list)

# Defindo os requests:
def get_user(id):
  response = requests.get(f'{sdw2023_api_url}/users/{id}')
  return response.json() if response.status_code == 200 else None #Note que interessante esse return

# Comuniando com a API:
users = [user for id in user_list if (user := get_user(id) is not None)]
print(json.dumps(users,indent=2))



"""# Transformação (Transform):
```
Partindo para a próxima etapa, "Transform" (Transformar), os dados extraídos
na etapa de "Extract" são processados e transformados de acordo com as
necessidades específicas do projeto.
```



```
Nessa etapa, utilizaremos a comunicação com a API
do chatGPT para realizar a transformação que queremos.
```

## Comunicação com a API da IA Generativa:
Utilizando a API da OpenIA



```
A escolha da API da OpenIA é uma
escolha óbvia e se faz necessário
essa comunicação para que possamos utiliza-la
no nosso projeto.
```

**OBS:**


```
Aqui vamos instalar a bibliote da
OpenIA, mas podemos também trabalhar
por requerimento (GET, POST, etc). Isso
é uma curiosidade interessante para se saber,
se você não quiser, não precisa instalar a
biblioteca da openIA.
```
"""

#
openai_api_key = 'TODO'
openai.api_key = openai_api_key

def generate_ai_news(user):
  completion = openai.ChatCompletion.create(
    model="gpt-4",
    messages=[
      {
          "role": "system",
          "content": "Você é um especialista em markting bancário."
      },
      {
          "role": "user",
          "content": f"Crie uma mensagem para {user['name']} sobre a importância dos investimentos (máximo de 100 caracteres)"
      }
    ]
  )
  return completion.choices[0].message.content.strip('\"')

for user in users:
  news = generate_ai_news(user)
  print(news)
  user['news'].append({
      "icon": "https://digitalinnovationone.github.io/santander-dev-week-2023-api/icons/credit.svg",
      "description": news
  })

"""# Carregamento (Load):

"""

def update_user(user):
  response = requests.put(f"{sdw2023_api_url}/users/{user['id']}", json=user)
  return True if response.status_code == 200 else False

for user in users:
  success = update_user(user)
  print(f"User {user['name']} updated? {success}!")